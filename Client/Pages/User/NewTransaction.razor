@page "/transactions/new-transaction"
@layout MainLayout
@inject HttpClient httpClient

<PageTitle>Endava .NET Tech Course</PageTitle>

<AuthorizeView Roles="User">
<MudText Typo="Typo.h4" Class="mb-4"  GutterBottom="true">Transfera Fonduri</MudText>

<MudGrid>
    @if (wallets is null || !wallets.Any())
    {
        <MudAlert>Pentru a putea efectua o tranzactie aveti nevoie de portofele active</MudAlert>        
    }
    else
    {
        <MudItem md="12">
            <MudGrid>
                <MudItem md="2">
                    <h3>Portfelul sursa :</h3>
                </MudItem>
                <MudItem md="4">
                    <MudSelect Margin="Margin.Dense" T="string" Variant="Variant.Outlined" @bind-Value="newTransaction.SourceWalletId">
                        @foreach (var wallet in wallets)
                        {
                            <MudSelectItem Value="wallet.Id">@($"{wallet.Type} {wallet.Amount} {wallet.Currency}")</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="2">
                    <MudNumericField HideSpinButtons="true" @bind-Value="newTransaction.Amount" Label="Suma" Variant="Variant.Outlined" Step=".2M" />
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem md="12">
            <MudGrid>
                <MudItem md="2">
                    <h3>Portofelul destinatar :</h3>
                </MudItem>
                <MudItem md="4">
                    <MudSelect Margin="Margin.Dense" T="string" Variant="Variant.Outlined" @bind-Value="newTransaction.DestinationWalletId">
                        @foreach (var wallet in wallets)
                        {
                            <MudSelectItem Value="wallet.Id">@($"{wallet.Type} {wallet.Amount} {wallet.Currency}")</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem md="12">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="TransferFounds">Transfera</MudButton>
        </MudItem>
        <MudItem md="12">
            @if (newTransferError != string.Empty)
            {
                <MudAlert>@newTransferError</MudAlert>
            }
        </MudItem>
    }
</MudGrid>
</AuthorizeView>

@code {
    private IEnumerable<WalletDto> wallets;
    private TransactionDto newTransaction = new();
    private string newTransferError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetWallets();
        StateHasChanged();

        await base.OnInitializedAsync();
    }

    public async Task GetWallets() => wallets = await this.httpClient.GetFromJsonAsync<List<WalletDto>>("api/wallets");

    public async Task TransferFounds()
    {
        if (string.IsNullOrEmpty(newTransaction.SourceWalletId))
            newTransferError = "Pentru a efectua o tranzactie trebuie sa alegeti un portofel sursa.";
        else if (string.IsNullOrEmpty(newTransaction.DestinationWalletId))
            newTransferError = "Pentru a efectua o tranzactie trebuie sa alegeti un portofel destinatie.";
        else if (newTransaction.Amount <= 0)
            newTransferError = "Suma transferului trebuie sa fie mai mare ca 0";
        else
        {
            var currency = wallets.First(x => x.Id == newTransaction.SourceWalletId).Currency;
            newTransaction.Currency = currency;

            var result = await this.httpClient.PostAsJsonAsync("api/transactions", newTransaction);

            if (result.IsSuccessStatusCode)
            {
                await GetWallets();
                newTransaction = new();
                newTransferError = string.Empty;
            }
            else
                newTransferError = await result.Content.ReadAsStringAsync();
        }

        StateHasChanged();
    }
}
